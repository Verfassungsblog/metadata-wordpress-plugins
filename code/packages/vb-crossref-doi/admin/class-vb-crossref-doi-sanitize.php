<?php
/**
 * Class that sanitizes user input for admin settings.
 *
 * @package vb-crossref-doi
 */

/**
 * Class imports
 */
require_once plugin_dir_path( __FILE__ ) . '/class-vb-crossref-doi-settings-fields.php';
require_once plugin_dir_path( __FILE__ ) . '../includes/class-vb-crossref-doi-common.php';

if ( ! class_exists( 'VB_CrossRef_DOI_Sanitize' ) ) {

	/**
	 * Class that sanitizes user input for admin settings.
	 */
	class VB_CrossRef_DOI_Sanitize {

		/**
		 * Common methods
		 *
		 * @var VB_CrossRef_DOI_Common
		 */
		protected $common;

		/**
		 * Class that defines admin settings fields
		 *
		 * @var VB_CrossRef_DOI_Settings_Fields
		 */
		protected $settings_fields;

		/**
		 * Initialize class with plugin name.
		 *
		 * @param string $plugin_name the name of this plugin.
		 */
		public function __construct( $plugin_name ) {
			$this->common          = new VB_CrossRef_DOI_Common( $plugin_name );
			$this->settings_fields = new VB_CrossRef_DOI_Settings_Fields();
		}

		/**
		 * Return the field name of the settings field given the option parameter provided by the sanitize callback.
		 *
		 * Parses the option name that is generated by VB_CrossRef_DOI_Common::get_settings_field_id.
		 *
		 * @param string $option the option name.
		 * @return array the settings field array for this field
		 */
		protected function get_field_from_option( $option ) {
			$field_name = preg_replace( '/^' . $this->common->plugin_name . '_field_/', '', $option );
			$field_name = preg_replace( '/_value$/', '', $field_name );
			$field      = $this->settings_fields->get_field( $field_name );
			if ( empty( $field ) ) {
				return array(
					'label' => 'unknown',
				);
			}
			return $field;
		}

		/**
		 * Sanitizes a text option and verifies that the string is not empty.
		 *
		 * @param string $input the user input.
		 * @param string $option the option name.
		 * @return string sanitized input
		 */
		public function can_not_be_empty_text( $input, $option ) {
			$field = $this->get_field_from_option( $option );
			if ( empty( trim( $input ) ) ) {
				add_settings_error(
					$option,
					'can-not-be-empty',
					'"' . $field['label'] . '" can not be empty',
					'error',
				);
			}
			return trim( $input );
		}

		/**
		 * Sanitizes option by checking it is a positive integer. Returns the default settings field value
		 * if the input is not a number.
		 *
		 * @param string $input the user input.
		 * @param string $option the option name.
		 * @return string sanitized input
		 */
		public function can_not_be_empty_positive_integer( $input, $option ) {
			$field = $this->get_field_from_option( $option );
			if ( ! is_numeric( trim( $input ) ) ) {
				add_settings_error(
					$option,
					'must-be-numeric',
					'"' . $field['label'] . '" must be number above 0',
					'error'
				);
				return $this->common->get_settings_field_default_value( $field['name'] );
			}

			$number = (int) ( trim( $input ) );

			if ( $number < 1 ) {
				add_settings_error(
					$option,
					'must-be-above-zero',
					'"' . $field['label'] . '" must be positive number (>= 1)',
					'error'
				);
				return max( $number, 1 );
			}

			return $number;
		}

		/**
		 * Sanitizes option by checking it is an integer between 12 and 64. Returns the default settings field value
		 * if the input is not a number.
		 *
		 * @param string $input the user input.
		 * @param string $option the option name.
		 * @return string sanitized input
		 */
		public function doi_suffix_length( $input, $option ) {
			$field = $this->get_field_from_option( $option );
			if ( ! is_numeric( trim( $input ) ) ) {
				add_settings_error(
					$option,
					'must-be-numeric',
					'"' . $field['label'] . '" must be number between 12 and 64',
					'error'
				);
				return $this->common->get_settings_field_default_value( $field['name'] );
			}

			$number = (int) ( trim( $input ) );
			if ( $number < 12 || $number > 64 ) {
				add_settings_error(
					$option,
					'must-be-between-12-and-64',
					'"' . $field['label'] . '" must be between 12 and 64',
					'error'
				);
				return max( min( $number, 64 ), 12 );
			}

			return $number;
		}

		/**
		 * Sanitizes option by checking it is a meta key, meaning a single word consisting of letters, digits,
		 * underscore or minus. Removes any invalid characters.
		 *
		 * @param string $input the user input.
		 * @param string $option the option name.
		 * @return string sanitized input
		 */
		public function meta_key( $input, $option ) {
			$field = $this->get_field_from_option( $option );
			if ( ! preg_match( '/^[\w-]+$/', trim( $input ) ) ) {
				$label = str_replace( '<br>', ' ', $field['label'] );
				add_settings_error(
					$option,
					'must-be-meta-key',
					'"' . $label . '" can only consist of a single word (letters, digits, underscore and minus,
                    but no spaces, umlauts or other special characters).',
					'error'
				);
				return preg_replace( '/[^\w-]/', '', trim( $input ) );
			}

			return trim( $input );
		}

	}

}
